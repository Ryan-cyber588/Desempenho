import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.express as px

# Configura√ß√£o da barra lateral
with st.sidebar:
     st.divider()
     st.image("./Logo.png", "Por: Ryan Costa Rangel")
     st.markdown(
        "<h1 style='text-align: center;'>Bem-vindo ao ambiente tesouraria</h1>", 
        unsafe_allow_html=True
    )

     st.divider()

     st.text("O mercado de a√ß√µes √© um ambiente din√¢mico onde investidores compram e vendem participa√ß√µes em empresas. No setor da constru√ß√£o civil, a√ß√µes de grandes construtoras brasileiras, como Cyrela, MRV e Even, refletem o desempenho do mercado imobili√°rio e a confian√ßa dos investidores. Este aplicativo permite visualizar e analisar o hist√≥rico de pre√ßos dessas a√ß√µes, identificando tend√™ncias e varia√ß√µes ao longo do tempo. Com gr√°ficos interativos e indicadores financeiros, √© poss√≠vel avaliar o comportamento do mercado e tomar decis√µes mais embasadas. Ao acompanhar m√©tricas como pre√ßos de fechamento, volume de negocia√ß√µes e retornos, investidores podem entender melhor os ciclos econ√¥micos e oportunidades no setor. üöÄ")

# Lista de construtoras brasileiras na B3
acoes = {
    "Cyrela": "CYRE3.SA",
    "MRV": "MRVE3.SA",
    "Eztec": "EZTC3.SA",
    "Even": "EVEN3.SA",
    "Direcional": "DIRR3.SA",
    "Tenda": "TEND3.SA"
}

st.markdown(
    "<h1 style='text-align: center;'>An√°lise de A√ß√µes de Construtoras Brasileiras</h1>",
    unsafe_allow_html=True
)

st.divider()

# Escolher a construtora
empresa = st.selectbox("üèóÔ∏è Escolha uma construtora:", list(acoes.keys()))
simbolo = acoes[empresa]

# Definir per√≠odo
periodo = st.selectbox("üìÖ Escolha o per√≠odo de an√°lise:", ["7d", "1mo", "3mo", "6mo", "1y", "5y"])

st.divider()
# Baixar os dados do Yahoo Finance
st.write(f"### Dados hist√≥ricos da {empresa} ({simbolo}) para {periodo}")
df = yf.download(simbolo, period=periodo)

# Verificar se h√° dados retornados
if df.empty:
    st.error("‚ùå Nenhum dado encontrado para esse per√≠odo. Tente escolher outro.")
else:
    # Se houver MultiIndex, remover o primeiro n√≠vel
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = df.columns.get_level_values(1) # Pega apenas os nomes das colunas
   

    # Renomear colunas, caso ainda contenham o nome da a√ß√£o
    df.columns = ["Open", "High", "Low", "Close", "Adj Close", "Volume"][:len(df.columns)]

    # Resetar √≠ndice para usar datas corretamente nos gr√°ficos
    df = df.reset_index()

    # Exibir tabela de pre√ßos
    st.dataframe(df.tail(),use_container_width=True)
    
    st.divider()
    # Verificar se 'Close' est√° dispon√≠vel antes de plotar o gr√°fico
    if "Close" in df.columns:
        fig = px.line(df, x="Date", y="Close", title=f"üìä Hist√≥rico de Pre√ßos - {empresa}")
        st.plotly_chart(fig)

        # C√°lculo de Retorno
        retorno = ((df["Close"].iloc[-1] / df["Close"].iloc[0]) - 1) * 100
        st.divider()
        st.metric(label=f"üìâ Retorno no per√≠odo ({periodo})", value=f"{retorno:.2f}%")
    else:
        st.warning("‚ö†Ô∏è Dados de volume n√£o dispon√≠veis para este ativo ou per√≠odo.")

    # Verificar se 'Volume' est√° dispon√≠vel antes de exibir
    if "Volume" in df.columns and df["Volume"].notna().any():
        st.write("üìä **Indicadores:**")
        st.write("- üìà **Volume m√©dio de negocia√ß√µes:**", round(df["Volume"].mean(), 2))
        st.write("- üí∞ **√öltimo pre√ßo de fechamento:** R$", round(df["Close"].iloc[-1], 2))

# Rodap√©
st.write("---")
#st.write("**Desenvolvido com ‚ù§Ô∏è usando Streamlit e Yahoo Finance API**")
st.markdown(
        "<h1 style='font-size: 15px;text-align: center;'>Desenvolvido com ‚ù§Ô∏è usando Streamlit e Yahoo Finance API</h1>", 
        unsafe_allow_html=True
    )
